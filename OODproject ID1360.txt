import java.util.ArrayList;
import java.util.List;

public class Library {
    private List<Book> books;

    public Library() {
        books = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public void removeBook(String bookId) {
        books.removeIf(book -> book.getId().equals(bookId));
    }

    public List<Book> getBooks() {
        return books;
    }
}
public class Book {
    private String id;
    private String name;
    private String author;
    private int quantity;

    public Book(String id, String name, String author, int quantity) {
        this.id = id;
        this.name = name;
        this.author = author;
        this.quantity = quantity;
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public String getAuthor() {
        return author;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}
public class Member {
    private String id;
    private String name;
    private String password;

    public Member(String id, String name, String password) {
        this.id = id;
        this.name = name;
        this.password = password;
    }

    public String getId() {
        return id;
    }

    public String getPassword() {
        return password;
    }

    public String getName() {
        return name;
    }
}
public class Admin {
    private String id;
    private String role;

    public Admin(String id, String role) {
        this.id = id;
        this.role = role;
    }

    public String getId() {
        return id;
    }

    public String getRole() {
        return role;
    }
}
import java.util.HashMap;
import java.util.Map;

public class MemberManager {
    private Map<String, Member> members;

    public MemberManager() {
        members = new HashMap<>();
    }

    public void registerMember(String id, String name, String password) {
        if (members.containsKey(id)) {
            System.out.println("Member already exists.");
        } else {
            members.put(id, new Member(id, name, password));
            System.out.println("Member registered: " + name);
        }
    }

    public Member loginMember(String id, String password) {
        Member member = members.get(id);
        if (member != null && member.getPassword().equals(password)) {
            return member;
        }
        System.out.println("Invalid credentials.");
        return null;
    }

    public void listMembers() {
        if (members.isEmpty()) {
            System.out.println("No members registered.");
        } else {
            for (Member member : members.values()) {
                System.out.println("ID: " + member.getId() + ", Name: " + member.getName());
            }
        }
    }
}
public class BookManager {
    private Library library;

    public BookManager(Library library) {
        this.library = library;
    }

    public void listBooks() {
        for (Book book : library.getBooks()) {
            System.out.println("ID: " + book.getId() + ", Name: " + book.getName() +
                               ", Author: " + book.getAuthor() + ", Quantity: " + book.getQuantity());
        }
    }

    public void addBook(String id, String name, String author, int quantity) {
        library.addBook(new Book(id, name, author, quantity));
        System.out.println("Book added: " + name);
    }

    public void removeBook(String id) {
        library.removeBook(id);
        System.out.println("Book removed.");
    }

    public boolean borrowBook(String bookId) {
        for (Book book : library.getBooks()) {
            if (book.getId().equals(bookId)) {
                if (book.getQuantity() > 0) {
                    book.setQuantity(book.getQuantity() - 1); // Decrease quantity
                    System.out.println("Book borrowed: " + book.getName());
                    return true;
                } else {
                    System.out.println("Sorry, the book is out of stock.");
                    return false;
                }
            }
        }
        System.out.println("Book not found.");
        return false;
    }

    public boolean returnBook(String bookId) {
        for (Book book : library.getBooks()) {
            if (book.getId().equals(bookId)) {
                book.setQuantity(book.getQuantity() + 1); // Increase quantity
                System.out.println("Book returned: " + book.getName());
                return true;
            }
        }
        System.out.println("Book not found.");
        return false;
    }
}
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Initialize Library, BookManager, MemberManager, etc.
        Library library = new Library();
        BookManager bookManager = new BookManager(library);
        MemberManager memberManager = new MemberManager();

        // Add example books to the library
        library.addBook(new Book("1", "The Catcher in the Rye", "J.D. Salinger", 5));
        library.addBook(new Book("2", "To Kill a Mockingbird", "Harper Lee", 3));
        library.addBook(new Book("3", "1984", "George Orwell", 4));

        // Create an admin manually
        Admin admin = new Admin("mehedy", "Admin");

        // Login and Menu loop
        while (true) {
            System.out.println("\nLibrary Management System");
            System.out.println("1. Login (Admin)");
            System.out.println("2. Register (Member)");
            System.out.println("3. Login (Member)");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1: // Admin Login
                    System.out.print("Enter username: ");
                    String username = scanner.nextLine();
                    System.out.print("Enter password: ");
                    String password = scanner.nextLine();
                    if (username.equals(admin.getId()) && password.equals("1202")) {
                        System.out.println("Admin logged in!");
                        boolean adminSession = true;
                        while (adminSession) {
                            System.out.println("\nAdmin Menu");
                            System.out.println("1. Add Book");
                            System.out.println("2. Remove Book");
                            System.out.println("3. Books List");
                            System.out.println("4. Members List");
                            System.out.println("5. Logout");
                            System.out.print("Choose an option: ");
                            int adminChoice = scanner.nextInt();
                            scanner.nextLine(); // Consume newline

                            switch (adminChoice) {
                                case 1: // Add Book
                                    System.out.print("Enter book ID: ");
                                    String bookId = scanner.nextLine();
                                    System.out.print("Enter book name: ");
                                    String bookName = scanner.nextLine();
                                    System.out.print("Enter author: ");
                                    String author = scanner.nextLine();
                                    System.out.print("Enter quantity: ");
                                    int quantity = scanner.nextInt();
                                    scanner.nextLine(); // Consume newline
                                    bookManager.addBook(bookId, bookName, author, quantity);
                                    break;
                                case 2: // Remove Book
                                    System.out.print("Enter book ID to remove: ");
                                    String bookIdToRemove = scanner.nextLine();
                                    bookManager.removeBook(bookIdToRemove);
                                    break;
                                case 3: // List Books
                                    bookManager.listBooks();
                                    break;
                                case 4: // Member List
                                    memberManager.listMembers(); // Show the member list
                                    break;
                                case 5: // Logout
                                    System.out.println("Admin logged out.");
                                    adminSession = false;
                                    break;
                                default:
                                    System.out.println("Invalid option. Try again.");
                            }
                        }
                    } else {
                        System.out.println("Invalid Information.");
                    }
                    break;
                case 2: // Register Member
                    System.out.print("Enter member ID: ");
                    String memberId = scanner.nextLine();
                    System.out.print("Enter member name: ");
                    String memberName = scanner.nextLine();
                    System.out.print("Enter member password: ");
                    String memberPassword = scanner.nextLine();
                    memberManager.registerMember(memberId, memberName, memberPassword);
                    break;
                case 3: // Member Login
                    System.out.print("Enter member ID: ");
                    String memberLoginId = scanner.nextLine();
                    System.out.print("Enter password: ");
                    String memberLoginPassword = scanner.nextLine();
                    Member member = memberManager.loginMember(memberLoginId, memberLoginPassword);
                    if (member != null) {
                        System.out.println("Member logged in!");
                        boolean memberSession = true;
                        while (memberSession) {
                            System.out.println("\nMember Menu");
                            System.out.println("1. List Books");
                            System.out.println("2. Borrow a Book");
                            System.out.println("3. Return a Book");
                            System.out.println("4. Logout");
                            System.out.print("Choose an option: ");
                            int memberChoice = scanner.nextInt();
                            scanner.nextLine(); // Consume newline

                            switch (memberChoice) {
                                case 1: // List Books
                                    bookManager.listBooks();
                                    break;
                                case 2: // Borrow a Book
                                    System.out.print("Enter book ID to borrow: ");
                                    String bookIdToBorrow = scanner.nextLine();
                                    bookManager.borrowBook(bookIdToBorrow);
                                    break;
                                case 3: // Return a Book
                                    System.out.print("Enter book ID to return: ");
                                    String bookIdToReturn = scanner.nextLine();
                                    bookManager.returnBook(bookIdToReturn);
                                    break;
                                case 4: // Logout
                                    System.out.println("Member logged out.");
                                    memberSession = false;
                                    break;
                                default:
                                    System.out.println("Invalid option. Try again.");
                            }
                        }
                    }
                    break;
                case 4: // Exit
                    System.out.println("Thank you for using our services.");
                    System.out.println("Come again!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }
}